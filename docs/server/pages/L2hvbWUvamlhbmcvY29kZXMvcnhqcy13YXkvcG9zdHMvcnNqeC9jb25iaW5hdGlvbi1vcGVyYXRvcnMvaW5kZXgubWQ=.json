{"pageProps":{"content":"<ul>\n    <li>merge用于合并多个数据源，常用于异步处理多个数据源，先到先得；可指定一个concurrent用与控制数据源并行数量。</li>\n    <li>\n        zip和combineLatest的区别在于<br>\nzip每吐出一个数据集合都需要等待所有数据源吐出数据（数据源的数据是 and 的关系）;<br>\ncombineLatest 仅仅在第一次吐出数据集合的时候等待所有数据源，后面要任意数据源产生数据都会吐出数据集合（数据源的数据从 and 变为 or）<br>\n    combineLatest 小缺陷：<br>\n    对于同时到来的两个或多个数据，本应该产生一个输出，实际结果却产生了两个或多个，<br>\n    因为多个数据源同时产生数据，同时产生多个宏任务，因此也就无法使用微任务解决这个缺陷（个人猜测）<br>\n    </li>\n    <li>\n        withLatestFrom 解决了zip、combineLatest中的多重继承问题（glitch）<br>\n        glitch 问题的根源在于多个Observable同时有数据到来时都会向下游吐出数据，因此会出现同一个时刻吐出多个数据的情况<br>\n        withLatestFrom解决方式：<br>\n        1、提供一个控制者Observble作为Controller，其他Observable作为从属仅提供数据（不向下游提供数据）<br>\n        2、controller向下游吐出数据（因此也把Subscription提供给下游）<br>\n        3、controller自身有数据时会检查 从属者是否已经提供数据（而不管数据何时提供的）<br>\n        上面三点决定了在订阅controller之前势必要先订阅从属者最后订阅controller，也就给了当同时多个Observable吐出数据时从属者更新数据的机会\n    </li>\n    <li>\n        race 第一个吐出数据Observable对象保留订阅状态，其他observable直接取消订阅；\"赢者通吃\"\n    </li>\n    <li>\n        startWith 直接在订阅后吐出参数，而不管observable内部shadule\n    </li>\n    <li>\n        forkjoin 等待所有bservable对象都完结（completed）时候把所有observable对象的最后一个数据组合后吐出\n    </li>\n</ul>","menuArray":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"rsjx","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"conbination-operators","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvbWVyZ2UubWQ=","label":"merge","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvcmFjZS5tZA==","label":"race","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvc3RhcnRXaXRoLm1k","label":"startWith","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20ubWQ=","label":"withLatestFrom","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvemlwLWNvbmJpbmVMYXRlc3QubWQ=","label":"zip-conbineLatest","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"high-order Observables","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2NvbmNhdEFsbC1tZXJnZUFsbC5tZA==","label":"concatAll-mergeAll","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3N3aXRjaEFMTC1leGhhdXN0Lm1k","label":"switchALL-exhaust","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3ppcEFsbC1jb25iaW5lQWxsLm1k","label":"zipAll-conbineAll","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"index","subMenus":null}]}]},"__N_SSG":true}