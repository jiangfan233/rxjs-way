{"pageProps":{"content":"<h5>withLatestFrom 解决了 zip、combineLatest 中的多重继承问题（glitch）</h5>\n<p>glitch 问题的根源在于多个 Observable 同时有数据到来时都会向下游吐出数据，因此会出现同一个时刻吐出多个数据的情况</p>\n<h6>withLatestFrom 解决方式：</h6>\n<ul>\n<li>提供一个控制者 Observble 作为 Controller，其他 Observable 作为从属仅提供数据（不向下游提供数据）</li>\n<li>controller 向下游吐出数据（因此也把 Subscription 提供给下游）</li>\n<li>controller 自身有数据时会检查 从属者是否已经提供数据（而不管数据何时提供的）</li>\n<li>上面三点决定了在订阅 controller 之前势必要先订阅从属者最后订阅 controller，也就给了当同时多个 Observable 吐出数据时从属者更新数据的机会</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fakeWithLatestFrom</span> = (<span class=\"hljs-params\">...rest: any[]</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">porject</span>: <span class=\"hljs-title class_\">Function</span> | <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">others</span>: <span class=\"hljs-title class_\">Observable</span>&lt;any&gt;[];\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">data</span>: any[];\n  <span class=\"hljs-keyword\">const</span> last = rest[rest.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> last === <span class=\"hljs-string\">\"function\"</span>) {\n    porject = last;\n    others = rest.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>);\n    data = <span class=\"hljs-title class_\">Array</span>(rest.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">undefined</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    porject = <span class=\"hljs-literal\">undefined</span>;\n    others = rest;\n    data = <span class=\"hljs-title class_\">Array</span>(rest.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">undefined</span>);\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obs$: Observable&lt;any&gt;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Observable</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer: Subscriber&lt;any&gt;</span>) =&gt;</span> {\n      others.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> {\n        item.<span class=\"hljs-title function_\">subscribe</span>(\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n            data[index] = val;\n          },\n          <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> observer.<span class=\"hljs-title function_\">error</span>(err)\n        );\n      });\n\n      <span class=\"hljs-keyword\">const</span> subscription = obs$.<span class=\"hljs-title function_\">subscribe</span>(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">if</span> (data.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> v !== <span class=\"hljs-literal\">undefined</span> &amp;&amp; v !== <span class=\"hljs-literal\">null</span>)) {\n            observer.<span class=\"hljs-title function_\">next</span>(\n              porject ? porject.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, [value, ...data]) : [value, ...data]\n            );\n          }\n        },\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> observer.<span class=\"hljs-title function_\">error</span>(err),\n        <span class=\"hljs-function\">() =&gt;</span> observer.<span class=\"hljs-title function_\">complete</span>()\n      );\n\n      <span class=\"hljs-keyword\">return</span> subscription;\n    });\n  };\n};\n\n<span class=\"hljs-keyword\">const</span> source2$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">const</span> source3$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>);\n\n<span class=\"hljs-keyword\">const</span> source1$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2000</span>).<span class=\"hljs-title function_\">pipe</span>(\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x * <span class=\"hljs-number\">100</span>),\n\n  <span class=\"hljs-comment\">// source$1 处于主动地位（控制并发出最终形成的数据），数据不足时则不发送数据。</span>\n  <span class=\"hljs-comment\">// withLatestFrom参数中的Observables处于从属地位（仅提供数据）</span>\n  <span class=\"hljs-comment\">// withLatestFrom(source2$,)</span>\n  <span class=\"hljs-title function_\">fakeWithLatestFrom</span>(source2$, <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> [a, b].<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"-\"</span>))\n);\n\n<span class=\"hljs-comment\">// source1$.subscribe(</span>\n<span class=\"hljs-comment\">//     console.log,</span>\n<span class=\"hljs-comment\">//     console.error,</span>\n<span class=\"hljs-comment\">//     () =&gt; console.log(\"done\")</span>\n<span class=\"hljs-comment\">// )</span>\n\n<span class=\"hljs-keyword\">const</span> original$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>);\n<span class=\"hljs-keyword\">const</span> src2$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-string\">\"b\"</span>));\n\n<span class=\"hljs-keyword\">const</span> src3$ = <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">pipe</span>(\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-string\">\"c\"</span>),\n  <span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">5</span>)\n);\n\n<span class=\"hljs-comment\">// withLatestFrom 解决了zip、combineLatest中的多重继承问题（glitch）</span>\n<span class=\"hljs-comment\">// glitch 问题的根源在于多个Observable同时有数据到来时都会向下游吐出数据，因此会出现同一个时刻吐出多个数据的情况</span>\n<span class=\"hljs-comment\">// withLatestFrom解决方式：</span>\n<span class=\"hljs-comment\">// 1、提供一个控制者Observble作为Controller，其他Observable作为从属仅提供数据（不向下游提供数据）</span>\n<span class=\"hljs-comment\">// 2、controller向下游吐出数据（因此也把Subscription提供给下游）</span>\n<span class=\"hljs-comment\">// 3、controller自身有数据时会检查 从属者是否已经提供数据（而不管数据何时提供的）</span>\n<span class=\"hljs-comment\">// 上面三点决定了在订阅controller之前势必要先订阅从属者最后订阅controller，也就给了当同时多个Observable吐出数据时从属者更新数据的机会</span>\n<span class=\"hljs-keyword\">const</span> src1$ = original$.<span class=\"hljs-title function_\">pipe</span>(\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-string\">\"a\"</span>),\n  <span class=\"hljs-title function_\">withLatestFrom</span>(src2$, src3$)\n  <span class=\"hljs-comment\">// fakeWithLatestFrom(src2$, src3$)</span>\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"start\"</span>);\n<span class=\"hljs-keyword\">const</span> sub = src1$.<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>);\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  sub.<span class=\"hljs-title function_\">unsubscribe</span>();\n}, <span class=\"hljs-number\">10000</span>);\n</code></pre>\n","menuArray":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"rsjx","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"conbination-operators","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvbWVyZ2UubWQ=","label":"merge","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvcmFjZS5tZA==","label":"race","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvc3RhcnRXaXRoLm1k","label":"startWith","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20ubWQ=","label":"withLatestFrom","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvemlwLWNvbmJpbmVMYXRlc3QubWQ=","label":"zip-conbineLatest","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"high-order Observables","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2NvbmNhdEFsbC1tZXJnZUFsbC5tZA==","label":"concatAll-mergeAll","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3N3aXRjaEFMTC1leGhhdXN0Lm1k","label":"switchALL-exhaust","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3ppcEFsbC1jb25iaW5lQWxsLm1k","label":"zipAll-conbineAll","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"index","subMenus":null}]}]},"__N_SSG":true}