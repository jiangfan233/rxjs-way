{"pageProps":{"content":"<h5>zip和combineLatest的区别在于</h5>\n<p>zip每吐出一个数据集合都需要等待所有数据源吐出数据（数据源的数据是 and 的关系）;<br>\ncombineLatest 仅仅在第一次吐出数据集合的时候等待所有数据源，后面要任意数据源产生数据都会吐出数据集合（数据源的数据从 and 变为 or）</p>\n<h6>combineLatest 小缺陷：</h6>\n<p>对于同时到来的两个或多个数据，本应该产生一个输出，实际结果却产生了两个或多个，<br>\n因为多个数据源同时产生数据，同时产生多个宏任务，因此也就无法使用微任务解决这个缺陷（个人猜测）</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// zip:</span>\n<span class=\"hljs-comment\">// 可操作多组数据流，</span>\n<span class=\"hljs-comment\">// zip产出的数据取决于所有数据流中最短的那个 =&gt; 并不是所有数据都能获取到</span>\n<span class=\"hljs-comment\">// zip产出数据的速度取决于所有数据流中最慢的那个</span>\n<span class=\"hljs-comment\">// zip(of(1,2,3), interval(1000).pipe(take(2))).subscribe(</span>\n<span class=\"hljs-comment\">//     console.log,</span>\n<span class=\"hljs-comment\">//     console.error,</span>\n<span class=\"hljs-comment\">//     // 产出 [1,0] [2,1] 之后 done</span>\n<span class=\"hljs-comment\">//     () =&gt; console.log(\"done\")</span>\n<span class=\"hljs-comment\">// )</span>\n\n<span class=\"hljs-comment\">//////////////////////////////////////////////</span>\n\n<span class=\"hljs-comment\">// zip和combineLatest的区别在于</span>\n<span class=\"hljs-comment\">// zip每吐出一个数据集合都需要等待所有数据源吐出数据（数据源的数据是 and 的关系），</span>\n<span class=\"hljs-comment\">// combineLatest 仅仅在第一次吐出数据集合的时候等待所有数据源，后面要任意数据源产生数据都会吐出数据集合（数据源的数据从 and 变为 or）</span>\n\n<span class=\"hljs-comment\">// combineLatest 第一次需要填充数据集合，因此需要等待所有数据，</span>\n<span class=\"hljs-comment\">// 后面的每一次只要任意数据源产生数据都会吐出数据集合</span>\n<span class=\"hljs-comment\">// combineLatest 可接受一个函数project，用于处理combineLatest产生的数据集合并将结果传递给下游</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fakeCombineLatest</span> = (<span class=\"hljs-params\">...args: any[]</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">project</span>: <span class=\"hljs-title class_\">Function</span> | <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">rest</span>: <span class=\"hljs-title class_\">Observable</span>&lt;any&gt;[];\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> args[args.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">\"function\"</span>) {\n    project = args[args.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n    rest = args.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    rest = args;\n  }\n  <span class=\"hljs-keyword\">const</span> values = <span class=\"hljs-title class_\">Array</span>(rest.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">const</span> completedArr = <span class=\"hljs-title class_\">Array</span>(rest.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">nextFunc</span> = (<span class=\"hljs-params\">val: any, index: number, observer: Subscriber&lt;any&gt;</span>) =&gt; {\n    values[index] = val;\n\n    <span class=\"hljs-comment\">// 这里仅仅验证 values 中数据的长度</span>\n    <span class=\"hljs-keyword\">if</span> (values.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val !== <span class=\"hljs-literal\">undefined</span> &amp;&amp; val !== <span class=\"hljs-literal\">null</span>)) {\n      observer.<span class=\"hljs-title function_\">next</span>(\n        project ? project.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, values.<span class=\"hljs-title function_\">slice</span>()) : values.<span class=\"hljs-title function_\">slice</span>()\n      );\n    }\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">completeFunc</span> = (<span class=\"hljs-params\">index: number, observer: Subscriber&lt;any[]&gt;</span>) =&gt; {\n    completedArr[index] = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">if</span> (completedArr.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isCompleted</span>) =&gt;</span> isCompleted)) {\n      observer.<span class=\"hljs-title function_\">complete</span>();\n    }\n  };\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Observable</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer: Subscriber&lt;any[]&gt;</span>) =&gt;</span> {\n    rest.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs$, index</span>) =&gt;</span> {\n      obs$.<span class=\"hljs-title function_\">subscribe</span>(\n        <span class=\"hljs-comment\">// 当有多个数据源同时(逻辑上的同时，物理上相差几纳秒)调用 nextFunc时，每一个都会创建一个宏任务</span>\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> <span class=\"hljs-title function_\">nextFunc</span>(val, index, observer),\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> observer.<span class=\"hljs-title function_\">error</span>(error),\n        <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">completeFunc</span>(index, observer)\n      );\n    });\n  });\n};\n\n<span class=\"hljs-comment\">// combineLatest(</span>\n<span class=\"hljs-comment\">// fakeCombineLatest(</span>\n<span class=\"hljs-comment\">//     timer(500, 1000).pipe(take(3), map(val =&gt; String.fromCharCode(val + 65))),</span>\n<span class=\"hljs-comment\">//     timer(1000, 1000).pipe(take(4)),</span>\n<span class=\"hljs-comment\">//     (a: string, b: number) =&gt; `item: ${a} -- ${b}`</span>\n<span class=\"hljs-comment\">// ).subscribe(</span>\n<span class=\"hljs-comment\">//     console.log,</span>\n<span class=\"hljs-comment\">//     console.error,</span>\n<span class=\"hljs-comment\">//     () =&gt; console.log(\"done\")</span>\n<span class=\"hljs-comment\">// )</span>\n\n<span class=\"hljs-comment\">// combineLatest 小缺陷(glitch)：</span>\n<span class=\"hljs-comment\">// 对于同时到来的两个或多个数据，本应该产生一个输出，实际结果却产生了两个或多个，</span>\n<span class=\"hljs-comment\">// 因为多个数据源同时产生数据，同时产生多个宏任务，因此也就无法使用微任务解决这个缺陷（个人猜测）</span>\n<span class=\"hljs-title function_\">fakeCombineLatest</span>(\n  <span class=\"hljs-comment\">// combineLatest(</span>\n  <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">pipe</span>(\n    <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${val}</span>a`</span>),\n    <span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">1</span>)\n  ),\n  <span class=\"hljs-title function_\">timer</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">pipe</span>(\n    <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${val}</span>b`</span>),\n    <span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">1</span>)\n  ),\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">a: string, b: string</span>) =&gt;</span> <span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${a}</span> -- <span class=\"hljs-subst\">${b}</span>`</span>\n).<span class=\"hljs-title function_\">subscribe</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>, <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">error</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"done\"</span>));\n</code></pre>\n","menuArray":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"rsjx","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"conbination-operators","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvbWVyZ2UubWQ=","label":"merge","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvcmFjZS5tZA==","label":"race","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvc3RhcnRXaXRoLm1k","label":"startWith","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20ubWQ=","label":"withLatestFrom","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvemlwLWNvbmJpbmVMYXRlc3QubWQ=","label":"zip-conbineLatest","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"high-order Observables","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2NvbmNhdEFsbC1tZXJnZUFsbC5tZA==","label":"concatAll-mergeAll","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3N3aXRjaEFMTC1leGhhdXN0Lm1k","label":"switchALL-exhaust","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3ppcEFsbC1jb25iaW5lQWxsLm1k","label":"zipAll-conbineAll","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"index","subMenus":null}]}]},"__N_SSG":true}