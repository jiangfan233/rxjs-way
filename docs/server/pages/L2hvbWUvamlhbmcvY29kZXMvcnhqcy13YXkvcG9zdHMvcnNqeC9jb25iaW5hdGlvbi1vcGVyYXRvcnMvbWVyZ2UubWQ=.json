{"pageProps":{"content":"<h5>merge用于合并多个数据源，常用于异步处理多个数据源，先到先得；可指定一个concurrent用与控制数据源并行数量。</h5>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fakeMerge</span> = (<span class=\"hljs-params\">...rest: any[]</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> concurrent = rest[rest.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obsArr</span>: <span class=\"hljs-title class_\">Observable</span>&lt;any&gt;[], <span class=\"hljs-attr\">restArr</span>: <span class=\"hljs-title class_\">Observable</span>&lt;any&gt;[], <span class=\"hljs-attr\">records</span>: boolean[];\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> concurrent === <span class=\"hljs-string\">\"number\"</span>) {\n        obsArr = rest.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, concurrent);\n        restArr = rest.<span class=\"hljs-title function_\">slice</span>(concurrent, -<span class=\"hljs-number\">1</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        obsArr = rest <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Observable</span>&lt;any&gt;[];\n        restArr = [];\n    }\n    <span class=\"hljs-comment\">// records用于记录当前并行数据源（concurrent）的订阅关系，true===已退订、数据源已完结</span>\n    records = <span class=\"hljs-title class_\">Array</span>(obsArr.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Observable</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer: Subscriber&lt;any&gt;</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">subs</span>: <span class=\"hljs-title class_\">Subscription</span>[];\n\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">subscribe</span> = (<span class=\"hljs-params\">obs$: Observable&lt;any&gt;, index: number</span>) =&gt; {\n            <span class=\"hljs-keyword\">return</span> obs$.<span class=\"hljs-title function_\">subscribe</span>(\n                <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> observer.<span class=\"hljs-title function_\">next</span>(val),\n                <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n                    observer.<span class=\"hljs-title function_\">error</span>(err);\n                    subs &amp;&amp; subs.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">sub</span> =&gt;</span> sub.<span class=\"hljs-title function_\">unsubscribe</span>());\n                },\n                <span class=\"hljs-function\">() =&gt;</span> {\n                    <span class=\"hljs-comment\">// 当一个数据源完结的时候，根据index拿到这个数据源并退订</span>\n                    <span class=\"hljs-comment\">// 取出新的数据源，并更新index的订阅关系。</span>\n                    <span class=\"hljs-keyword\">if</span>(subs[index]) {\n                        subs[index].<span class=\"hljs-title function_\">unsubscribe</span>();\n                        records[index] = <span class=\"hljs-literal\">true</span>;\n                        <span class=\"hljs-keyword\">if</span>(restArr.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n                            subs[index] = <span class=\"hljs-title function_\">subscribe</span>(restArr.<span class=\"hljs-title function_\">shift</span>()!, index);\n                            records[index] = <span class=\"hljs-literal\">false</span>;\n                        }\n                    }\n                    <span class=\"hljs-comment\">// 当所有数据源都完结的时候，fakeMerge 产生的Observable也应该完结</span>\n                    <span class=\"hljs-keyword\">if</span>(records.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">record</span> =&gt;</span> record === <span class=\"hljs-literal\">true</span>)) {\n                        observer.<span class=\"hljs-title function_\">complete</span>();\n                    }\n                },\n            )\n        }\n\n        subs = obsArr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">obs$, index</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">subscribe</span>(obs$, index);\n        })\n\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-title function_\">unsubscribe</span>(<span class=\"hljs-params\"></span>) {\n                subs &amp;&amp; subs.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">sub</span> =&gt;</span> sub.<span class=\"hljs-title function_\">unsubscribe</span>());\n            }\n        }\n    })\n}\n\n<span class=\"hljs-comment\">// const source1$ = timer(0, 1000).map(x =&gt; x + \"A\").take(2);</span>\n<span class=\"hljs-comment\">// const source2$ = timer(500, 1000).map(x =&gt; x + \"B\").take(3);</span>\n\n<span class=\"hljs-comment\">// // concurrent===2：只有当前两个数据源完结的时候第三个才有机会入场</span>\n<span class=\"hljs-comment\">// // const source3$ = merge(source1$, source2$, interval(1000), 2);</span>\n<span class=\"hljs-comment\">// const source3$ = fakeMerge(source1$, source2$, interval(1000), 2);</span>\n\n<span class=\"hljs-comment\">// source3$.take(10).subscribe(</span>\n<span class=\"hljs-comment\">//     console.log,</span>\n<span class=\"hljs-comment\">//     console.error,</span>\n<span class=\"hljs-comment\">//     () =&gt; console.log(\"done\")</span>\n<span class=\"hljs-comment\">// )</span>\n</code></pre>\n","menuArray":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"rsjx","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"conbination-operators","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvaW5kZXgubWQ=","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvbWVyZ2UubWQ=","label":"merge","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvcmFjZS5tZA==","label":"race","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvc3RhcnRXaXRoLm1k","label":"startWith","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvd2l0aExhdGVzdEZyb20ubWQ=","label":"withLatestFrom","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9jb25iaW5hdGlvbi1vcGVyYXRvcnMvemlwLWNvbmJpbmVMYXRlc3QubWQ=","label":"zip-conbineLatest","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"high-order Observables","subMenus":[{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2NvbmNhdEFsbC1tZXJnZUFsbC5tZA==","label":"concatAll-mergeAll","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL2luZGV4Lm1k","label":"index","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3N3aXRjaEFMTC1leGhhdXN0Lm1k","label":"switchALL-exhaust","subMenus":null},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9oaWdoLW9yZGVyIE9ic2VydmFibGVzL3ppcEFsbC1jb25iaW5lQWxsLm1k","label":"zipAll-conbineAll","subMenus":null}]},{"id":"L2hvbWUvamlhbmcvY29kZXMvcnhqcy13YXkvcG9zdHMvcnNqeC9pbmRleC5tZA==","label":"index","subMenus":null}]}]},"__N_SSG":true}